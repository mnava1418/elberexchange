{"version":3,"sources":["utils/ethUtil.js","store/selectors/index.js","components/NavBar.js","components/Spinner.js","store/selectors/ordersSelector.js","components/Trades.js","store/actions/ordersActions.js","store/actions/exchangeActions.js","store/actions/walletActions.js","store/interactions/walletInteractions.js","store/interactions/exchangeInteractions.js","components/OrderBook.js","components/MyTransactions.js","utils/priceChartUtil.js","store/selectors/priceChartSelector.js","components/PriceChart.js","store/selectors/walletSelectors.js","components/Balance.js","components/NewOrder.js","components/Content.js","store/interactions/web3Interactions.js","store/actions/web3Actions.js","store/actions/tokenActions.js","store/interactions/tokenInteractions.js","components/App.js","reportWebVitals.js","store/reducers.js","store/configureStore.js","index.js"],"names":["DECIMALS","ETH_ADDRESS","fromWei","amount","formatBalance","balance","Math","round","getDepositBalances","web3","exchangeBalance","walletBalance","depositAmount","newExchangeBalance","parseFloat","utils","toWei","toString","newWalletBalance","getWithdrawBalances","withdrawAmount","web3Selector","createSelector","state","get","w","account","accountSelector","a","exchangeSelector","e","tokenSelector","t","contractsLoadedSelector","tl","el","exchangeEthBalanceSelector","exchangeTokenBalanceSelector","loadingBalancesSelector","l","NavBar","className","href","this","props","target","rel","React","Component","connect","Spinner","type","filledOrdersLoaded","filledOrdersLoadedSelector","fl","filledOrders","filledOrdersSelector","f","orders","sort","b","timeStamp","decorateFilledOrders","canceledOrdersLoaded","canceledOrders","cl","allOrdersLoadedSelector","al","allOrders","openOrders","all","filled","canceled","getOpenOrders","openOrdersSelector","myTradesSelector","myTrades","filter","order","user","userFill","decorateMyTrades","myOpenOrdersSelector","cancelingOrderSelector","p","fillingOrderSelector","creatingOrderSelector","c","filledMap","getOrderMap","canceledMap","id","decorateOpenOrders","getOrdersByType","orderMap","forEach","types","ordersByType","orderType","map","decorateOrder","decorateOpenOrder","previousOrder","decorateFilledOrder","decorateMyTrade","ethAmount","tokenAmount","tokenGive","amountGive","amountGet","precision","tokenPrice","formattedTimestamp","moment","unix","format","tokenPriceClass","orderTypeClass","tradeTypeClass","tradeSign","Trades","trades","trade","allOrdersLoaded","exchangeLoaded","exchange","exchangeLoadETHBalance","ethBalance","exchangeLoadTokenBalance","tokenBalance","loadingBalances","walletLoadEthBalance","walletLoadTokenBalance","loadWalletBalances","token","dispatch","eth","getBalance","methods","balanceOf","call","processedOrders","processedCanceled","processedFilled","loadExchange","net","getId","networkId","undefined","networks","Exchange","address","abi","Contract","loadOrders","getPastEvents","fromBlock","toBlock","canceledOrdersEvents","cancelOrders","event","returnValues","filledOrdersEvents","allOrdersEvents","createOrder","tokenGet","send","from","on","hash","err","console","error","window","alert","message","loadExchangeBalances","checkBalance","_address","showOrders","onClick","orderId","fillOrder","Content","Tabs","defaultActiveKey","transition","Tab","eventKey","title","ordersLoaded","fillingOrder","showMyOrders","myOpenOrders","cancelOrder","MyTransactions","cancelingOrder","chartOptions","chart","animations","enabled","toolbar","show","width","tooltip","theme","style","fontSize","fontFamily","x","formatter","y","marker","items","display","fixed","position","offsetX","offsetY","xaxis","labels","colors","cssClass","yaxis","minWidth","maxWidth","color","rotate","priceChartDataLoadedSelector","Date","loaded","priceChartDataSelector","graphData","getGraphData","lastPrice","length","series","data","direction","groupBy","o","startOf","Object","keys","hour","group","open","high","maxBy","low","minBy","close","showPriceData","chartData","options","height","PriceChart","priceChartDataLoaded","priceChartData","walletEthBalanceSelector","walletTokenBalanceSelector","deposit","ccy","walletEthBalance","exchangeEthBalance","walletTokenBalance","exchangeTokenBalance","depositBalances","depositETH","value","approve","depositTokens","depositToken","withdraw","withdrawBalances","withdrawETH","withdrawTokens","withdrawToken","showBalances","onSubmit","preventDefault","document","getElementById","isNaN","submitEvent","placeholder","required","paddingLeft","Balance","loadBalances","subscribeToEvents","events","Cancel","Trade","Deposit","WithDraw","Order","NewOrder","totalAmount","calculateTotal","bind","generateOrder","elbAmount","price","setState","Form","Group","Label","Control","onChange","controlId","Button","variant","creatingOrder","getOrderForm","OrderBook","loadWeb3","Web3","givenProvider","connection","loadAccount","getAccounts","accounts","tokenLoaded","loadToken","Token","App","loadBlockChainData","contractsLoaded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","action","contract","wallet","loggerMiddleware","createLogger","middleware","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","configureSore","preloadedState","createStore","applyMiddleware","ReactDOM","render","store"],"mappings":"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","file":"static/js/main.9d5d0b7c.chunk.js","sourcesContent":["const DECIMALS = (10**18)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\n\nexport const fromWei = (amount) => {\n    return (amount/DECIMALS)\n}\n\nexport const formatBalance = (balance) => {\n    const precision = 100  //2 decimal places\n    balance = fromWei(balance)\n    balance = Math.round(balance * precision) / precision\n    return balance\n}\n\nexport const getDepositBalances = (web3, exchangeBalance, walletBalance, depositAmount) => {\n    let newExchangeBalance = parseFloat(exchangeBalance) + parseFloat(depositAmount)\n    newExchangeBalance = web3.utils.toWei(newExchangeBalance.toString(), 'ether')\n    \n    let newWalletBalance = parseFloat(walletBalance) - parseFloat(depositAmount)\n    newWalletBalance = web3.utils.toWei(newWalletBalance.toString(), 'ether')\n\n    const depositBalances = { newExchangeBalance, newWalletBalance}\n    return depositBalances\n}\n\nexport const getWithdrawBalances = (web3, exchangeBalance, walletBalance, withdrawAmount) => {\n    let newExchangeBalance = parseFloat(exchangeBalance) - parseFloat(withdrawAmount)\n    newExchangeBalance = web3.utils.toWei(newExchangeBalance.toString(), 'ether')\n    \n    let newWalletBalance = parseFloat(walletBalance) + parseFloat(withdrawAmount)\n    newWalletBalance = web3.utils.toWei(newWalletBalance.toString(), 'ether')\n\n    const withdrawBalances = { newExchangeBalance, newWalletBalance}\n    return withdrawBalances\n}","import { get } from 'lodash'\nimport { createSelector } from 'reselect'\nimport { formatBalance } from '../../utils/ethUtil'\n\nconst web3 = state => get(state, 'web3.connection', null)\nexport const web3Selector = createSelector(web3, w => w)\n\nexport const account = state => get(state, 'web3.account', null)\nexport const accountSelector = createSelector(account, a => a)\n\nconst exchange = state => get(state, 'exchange.contract')\nexport const exchangeSelector = createSelector(exchange, e => e)\n\nconst token = state => get(state, 'token.contract')\nexport const tokenSelector = createSelector(token, t => t)\n\nconst tokenLoaded = state => get(state, 'token.loaded', false)\nconst exchangeLoaded = state => get(state, 'exchange.loaded', false)\n\nexport const contractsLoadedSelector = createSelector(\n    tokenLoaded,\n    exchangeLoaded,\n    (tl, el) => (tl && el)\n)\n\nconst exchangeEthBalance = state => get(state, 'exchange.ethBalance', 0)\nexport const exchangeEthBalanceSelector = createSelector(\n    exchangeEthBalance,\n    (balance) => {\n        balance = formatBalance(balance)\n        return balance\n    }\n)\n\nconst exchangeTokenBalance = state => get(state, 'exchange.tokenBalance', 0)\nexport const exchangeTokenBalanceSelector = createSelector(\n    exchangeTokenBalance,\n    (balance) => {\n        balance = formatBalance(balance)\n        return balance\n    }\n)\n\nconst loadingBalances = state => get(state, 'exchange.loadingBalances', false)\nexport const loadingBalancesSelector = createSelector(loadingBalances, l => l)","import React from 'react'\nimport { connect } from 'react-redux'\nimport { accountSelector } from '../store/selectors/index'\n\nclass NavBar extends React.Component {\n  render(){\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n            <a className=\"navbar-brand\" href=\"/#\">Elber Exchange</a>\n            <ul className=\"navbar-nav ml-auto\">\n                <li className= \"nav-item\">\n                    <a\n                    className=\"nav-link small\"\n                    href={`https://etherscan.io/address/${this.props.account}`}\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    >\n                        {this.props.account}\n                    </a>\n                </li>\n            </ul>\n        </nav>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      account: accountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(NavBar);\n","import React from 'react'\n\nclass Spinner extends React.Component {\n  render(){\n      if(this.props.type ==='table') {\n        return (<tbody className=\"spinner-border test-light text-center\"></tbody>)\n      } else {\n        return (<div className=\"spinner-border test-light text-center\"></div>)\n      }\n  }\n}\n\nexport default Spinner;\n","import { get } from 'lodash'\nimport moment from 'moment'\nimport { createSelector } from 'reselect'\nimport { ETH_ADDRESS, fromWei} from '../../utils/ethUtil'\nimport {account} from './index'\n\n//Filled Orders\nexport const filledOrdersLoaded = state => get(state, 'exchange.filledOrders.loaded', false)\nexport const filledOrdersLoadedSelector = createSelector(filledOrdersLoaded, fl => fl)\n\nexport const filledOrders = state => get(state, 'exchange.filledOrders.data', [])\nexport const currentFilledSelector = createSelector(filledOrders, f => f)\nexport const filledOrdersSelector = createSelector(\n    filledOrders,\n    (orders) => {\n        orders = orders.sort((a,b) => a.timeStamp - b.timeStamp)\n        orders = decorateFilledOrders(orders)\n        orders = orders.sort((a,b) => b.timeStamp - a.timeStamp)\n        return orders\n    }\n)\n\n//Canceled Orders\nconst canceledOrdersLoaded = state => get(state, 'exchange.canceledOrders.loaded', false)\nexport const canceledOrdersLoadedSelector = createSelector(canceledOrdersLoaded, cl => cl)\n\nconst canceledOrders = state => get(state, 'exchange.canceledOrders.data', [])\nexport const canceledOrdersSelector = createSelector(canceledOrders, orders => orders)\n\n//Open Orders\nconst allOrdersLoaded = state => get(state, 'exchange.allOrders.loaded', false)\nexport const allOrdersLoadedSelector = createSelector(\n    canceledOrdersLoaded,\n    filledOrdersLoaded,\n    allOrdersLoaded,\n    (cl, fl, al) => (cl && fl && al)\n)\n\nconst allOrders = state => get(state, 'exchange.allOrders.data', [])\nexport const allOrdersSelector = createSelector(allOrders, orders => orders)\n\nconst openOrders = state => {\n    const all = allOrders(state)\n    const filled = filledOrders(state)\n    const canceled = canceledOrders(state)\n    const openOrders = getOpenOrders(all, filled, canceled)\n    return openOrders\n}\n\nexport const openOrdersSelector = createSelector( openOrders, orders => orders )\n\nexport const myTradesSelector = createSelector(\n    account,\n    filledOrders,\n    (account, orders) => {\n        let myTrades = orders.filter( (order ) => order.user === account || order.userFill === account)\n        myTrades = myTrades.sort((a,b) => b.timeStamp - a.timeStamp)\n        myTrades = decorateMyTrades(account, myTrades)\n        return myTrades\n    }\n)\n\nexport const myOpenOrdersSelector = createSelector(\n    account,\n    openOrders,\n    (account, orders) => {\n        orders['Buy'] = orders['Buy'].filter( (order) => order.user === account)\n        orders['Sell'] = orders['Sell'].filter( (order) => order.user === account)\n        return orders\n    }\n)\n\nconst cancelingOrder = state => get(state, 'exchange.cancelingOrder', false)\nexport const cancelingOrderSelector = createSelector(cancelingOrder, p => p)\n\nconst fillingOrder = state => get(state, 'exchange.fillingOrder', false)\nexport const fillingOrderSelector = createSelector(fillingOrder, p => p)\n\nconst creatingOrder = state => get(state, 'exchange.creatingOrder', false)\nexport const creatingOrderSelector = createSelector(creatingOrder, c => c)\n\n/*----\nHELPER FUNCTIONS\n----*/\nconst getOpenOrders = (allOrders, filledOrders, canceledOrders) => {\n    const filledMap = getOrderMap(filledOrders)\n    const canceledMap = getOrderMap(canceledOrders)\n    \n    let openOrders = allOrders.filter( (order) => (!filledMap[order.id] && !canceledMap[order.id]) )\n    openOrders = openOrders.sort((a, b) => b.timeStamp - a.timeStamp)\n    openOrders = decorateOpenOrders(openOrders)\n    \n    const openOrdersByType = getOrdersByType(openOrders, ['Buy', 'Sell'])\n    return openOrdersByType\n}\n\n\nconst getOrderMap = (orders = []) => {\n    let orderMap = {}\n    orders.forEach( (order) => {\n        orderMap[order.id] = order\n    } )\n\n    return orderMap\n}\n\nconst getOrdersByType = (orders, types) => {\n    let ordersByType = {}\n    types.forEach( (type ) => {\n        ordersByType[type] = orders.filter( (order) => (order.orderType === type))\n    } )\n\n    return ordersByType\n}\n\nconst decorateOpenOrders = (orders) => {\n    orders = orders.map( (order) => {\n        order = decorateOrder(order)\n        order = decorateOpenOrder(order)\n        return order\n    })\n    return orders\n}\n\nexport const decorateFilledOrders = (orders) => {\n    let previousOrder = orders[0]\n    orders = orders.map((order) => {\n        order = decorateOrder(order)\n        order = decorateFilledOrder(order, previousOrder)\n        previousOrder = order\n        return order\n    })\n\n    return orders\n}\n\nconst decorateMyTrades = (account, orders) => {\n    orders = orders.map((order) => {\n        order = decorateOrder(order)\n        order = decorateMyTrade(account, order)\n        return order\n    })\n\n    return orders\n}\n\nconst decorateOrder = (order) => {\n    let ethAmount\n    let tokenAmount\n\n    if(order.tokenGive === ETH_ADDRESS) {\n        ethAmount = order.amountGive\n        tokenAmount = order.amountGet\n    } else {\n        ethAmount = order.amountGet\n        tokenAmount = order.amountGive\n    }\n\n    const precision = 100000\n    let tokenPrice = (ethAmount / tokenAmount)\n    tokenPrice = Math.round(tokenPrice * precision) / precision\n    \n    return ({\n        ...order,\n        ethAmount: fromWei(ethAmount),\n        tokenAmount: fromWei(tokenAmount),\n        tokenPrice,\n        formattedTimestamp: moment.unix(order.timeStamp).format('h:mm:ss a M/D')\n    })\n}\n\nconst decorateFilledOrder = (order, previousOrder) => {\n    let tokenPriceClass\n\n    if(order.id === previousOrder.id || previousOrder.tokenPrice <= order.tokenPrice) {\n        tokenPriceClass = 'success'\n    } else {\n        tokenPriceClass = 'danger'\n    }\n\n    return ({\n        ...order,\n        tokenPriceClass\n    })\n}\n\nconst decorateOpenOrder = (order) => {\n    let orderType\n    let orderTypeClass\n\n    if(order.tokenGive === ETH_ADDRESS) {\n        orderType = 'Buy'\n        orderTypeClass = 'success'\n    } else {\n        orderType = 'Sell'\n        orderTypeClass = 'danger'\n    }\n\n    return ({\n        ...order,\n        orderType,\n        orderTypeClass\n    })\n}\n\nconst decorateMyTrade = (account, order) => {\n    let tradeTypeClass\n    let tradeSign\n    if(order.user === account) {\n        if(order.tokenGive === ETH_ADDRESS) {\n            tradeTypeClass = 'success'\n            tradeSign = '+'\n        } else {\n            tradeTypeClass = 'danger'\n            tradeSign = '-'\n        }\n    } else {\n        if(order.tokenGive === ETH_ADDRESS) {\n            tradeTypeClass = 'danger'\n            tradeSign = '-'\n        } else {\n            tradeTypeClass = 'success'\n            tradeSign = '+'\n        }\n    }\n\n    return ({\n        ...order,\n        tradeTypeClass,\n        tradeSign\n    })\n}","import React from 'react'\nimport Spinner from './Spinner'\nimport { connect } from 'react-redux'\n\nimport { \n    filledOrdersLoadedSelector,\n    filledOrdersSelector\n} from '../store/selectors/ordersSelector'\n\nconst showTrades = (trades) => {\n    return (\n        <tbody>\n            {trades.map((trade) => {\n                return(\n                    <tr className={`order-${trade.id}`} key={trade.id}>\n                        <td className=\"text-muted\">{trade.formattedTimestamp}</td>\n                        <td>{trade.tokenAmount}</td>\n                        <td className={`text-${trade.tokenPriceClass}`}>{trade.tokenPrice}</td>\n                    </tr>\n                )\n            })}\n        </tbody>\n    )\n}\n\nclass Trades extends React.Component {\n  render(){\n    return (\n        <div className=\"vertical\">\n            <div className=\"card bg-dark text-white\">\n                <div className=\"card-header\">\n                    Trades\n                </div>\n                <div className=\"card-body\">\n                    <table className=\"table table-dark table-striped table-sm small\">\n                        <thead>\n                            <tr>\n                                <th>Time</th>\n                                <th>ELB</th>\n                                <th>ELB/ETH</th>\n                            </tr>\n                        </thead>\n                        { this.props.filledOrdersLoaded ? showTrades(this.props.filledOrders) : <Spinner type=\"table\"/> }\n                    </table>\n                </div>\n            </div>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      filledOrdersLoaded: filledOrdersLoadedSelector(state),\n      filledOrders: filledOrdersSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(Trades);\n","export const cancelOrdersLoaded = (canceledOrders) => {\n    return {\n        type: 'CANCELED_ORDERS_LOADED',\n        canceledOrders\n    }\n}\n\nexport const filledOrdersLoaded = (filledOrders) => {\n    return {\n        type: 'FILLED_ORDERS_LOADED',\n        filledOrders\n    }\n}\n\nexport const allOrdersLoaded = (allOrders) => {\n    return {\n        type: 'ALL_ORDERS_LOADED',\n        allOrders\n    }\n}\n\nexport const cancelingOrder = () => {\n    return {\n        type: 'CANCELING_ORDER',\n    }\n}\n\nexport const fillingOrder = () => {\n    return {\n        type: \"FILLING_ORDER\",\n    }\n}\n\nexport const creatingOrder = () => {\n    return {\n        type: \"CREATING_ORDER\"\n    }\n}\n\nexport const orderCreated = (order) => {\n    return {\n        type: 'ORDER_CREATED',\n        order\n    }\n}\n\nexport const orderCanceled = (order) => {\n    return {\n        type: 'ORDER_CANCELED',\n        order\n    }\n}\n\nexport const orderFilled = (order) => {\n    return {\n        type: 'ORDER_FILLED',\n        order\n    }\n}\n","export const exchangeLoaded = (exchange) => {\n    return {\n        type: 'EXCHANGE_LOADED',\n        exchange\n    }\n}\n\nexport const exchangeLoadETHBalance = (ethBalance) => {\n    return {\n        type: 'LOAD_EXCHANGE_ETH_BALANCE',\n        ethBalance\n    }\n}\n\nexport const exchangeLoadTokenBalance = (tokenBalance) => {\n    return {\n        type: 'LOAD_EXCHANGE_TOKEN_BALANCE',\n        tokenBalance\n    }\n}\n\nexport const loadingBalances = (loadingBalances) => {\n    return {\n        type: \"LOADING_BALANCES\",\n        loadingBalances\n    }\n}","export const walletLoadEthBalance = (ethBalance) => {\n    return {\n        type: 'LOAD_WALLET_ETH_BALANCE',\n        ethBalance\n    }\n}\n\nexport const walletLoadTokenBalance = (tokenBalance) => {\n    return {\n        type: 'LOAD_WALLET_TOKEN_BALANCE',\n        tokenBalance\n    }\n}","import { walletLoadEthBalance, walletLoadTokenBalance } from '../actions/walletActions'\n\nexport const loadWalletBalances = async (web3, account, token, dispatch) => {\n    const ethBalance = await web3.eth.getBalance(account)\n    dispatch(walletLoadEthBalance(ethBalance))\n\n    const tokenBalance = await token.methods.balanceOf(account).call()\n    dispatch(walletLoadTokenBalance(tokenBalance))\n}","import Exchange from '../../abis/Exchange.json'\nimport { \n    allOrdersLoaded, \n    cancelOrdersLoaded, \n    filledOrdersLoaded,\n    cancelingOrder,\n    fillingOrder,\n    creatingOrder,\n    orderCreated,\n    orderCanceled,\n    orderFilled\n} from '../actions/ordersActions'\n\nimport { exchangeLoaded, exchangeLoadETHBalance, exchangeLoadTokenBalance, loadingBalances } from '../actions/exchangeActions'\nimport { walletLoadEthBalance, walletLoadTokenBalance } from '../actions/walletActions'\nimport { ETH_ADDRESS, getDepositBalances, getWithdrawBalances } from '../../utils/ethUtil'\nimport { loadWalletBalances } from '../interactions/walletInteractions'\n\nlet processedOrders = {}\nlet processedCanceled = {}\nlet processedFilled = {}\n\nexport const loadExchange = async (web3, dispatch) => {\n    const networkId = await web3.eth.net.getId()\n    const networks = Exchange.networks\n    \n    if(networks[networkId] === undefined) {\n        return null\n    } else {\n        const address = networks[networkId].address\n        const abi = Exchange.abi\n        const exchange = new web3.eth.Contract(abi, address)\n        dispatch(exchangeLoaded(exchange))\n        return exchange\n    }\n}\n\nexport const loadOrders = async (exchange, dispatch) => {\n    const canceledOrdersEvents = await exchange.getPastEvents('Cancel', {fromBlock: 0, toBlock: 'latest'})\n    const cancelOrders = canceledOrdersEvents.map( event => event.returnValues)\n    dispatch(cancelOrdersLoaded(cancelOrders))\n\n    const filledOrdersEvents = await exchange.getPastEvents('Trade', {fromBlock: 0, toBlock: 'latest'})\n    const filledOrders = filledOrdersEvents.map( event => event.returnValues)\n    dispatch(filledOrdersLoaded(filledOrders))\n\n    const allOrdersEvents = await exchange.getPastEvents('Order', {fromBlock: 0, toBlock: 'latest'})\n    const allOrders = allOrdersEvents.map( event => event.returnValues)\n    dispatch(allOrdersLoaded(allOrders))\n}\n\nexport const subscribeToEvents = (exchange, web3, account, token, dispatch) => {\n    exchange.events.Cancel()\n    .on('data', async (event) => {\n        if(processedCanceled[event.returnValues.id] === undefined) {\n            dispatch(orderCanceled(event.returnValues))\n            processedCanceled[event.returnValues.id] = event.returnValues\n        }\n    })\n\n    exchange.events.Trade()\n    .on('data', async (event) => {\n        if(processedFilled[event.returnValues.id] === undefined) {\n            dispatch(orderFilled(event.returnValues))\n            processedFilled[event.returnValues.id] = event.returnValues\n\n            if(event.returnValues.user === account || event.returnValues.userFill === account) {\n                await loadWalletBalances(web3, account, token, dispatch)\n                await loadExchangeBalances(account, exchange, token, dispatch)\n            }\n        }\n    })\n\n    exchange.events.Deposit()\n    .on('data', (event) => {\n        dispatch(loadingBalances(false))\n    })\n\n    exchange.events.WithDraw()\n    .on('data', (event) => {\n        dispatch(loadingBalances(false))\n    })\n\n    exchange.events.Order()\n    .on('data', (event) => {\n        if(processedOrders[event.returnValues.id] === undefined) {\n            dispatch(orderCreated(event.returnValues))\n            processedOrders[event.returnValues.id] = event.returnValues\n        }\n    })\n}\n\nexport const cancelOrder = (exchange, orderId, account, dispatch) => {\n    exchange.methods.cancelOrder(orderId).send({from: account})\n    .on('transactionHash', (hash) => {\n        dispatch(cancelingOrder())\n    })\n    .on('error', (err) => {\n        console.error(err)\n        window.alert(err.message)\n    });   \n}\n\nexport const fillOrder = (exchange, orderId, account, dispatch) => {\n    exchange.methods.fillOrder(orderId).send({from: account})\n    .on('transactionHash', (hash) => {\n        dispatch(fillingOrder())\n    })\n    .on('error', (err) => {\n        console.error(err)\n        window.alert(err.message)\n    });\n}\n\nexport const createOrder = (web3, exchange, account, tokenGet, amountGet, tokenGive, amountGive, dispatch) => {\n    amountGet = web3.utils.toWei(amountGet, 'ether')\n    amountGive = web3.utils.toWei(amountGive, 'ether')\n\n\n    exchange.methods.createOrder(tokenGet, amountGet, tokenGive, amountGive).send({from: account})\n    .on('transactionHash', (hash) => {\n       dispatch(creatingOrder())\n    })\n    .on('error', (err) => {\n        console.error(err)\n        window.alert(err.message)\n    });\n}\n\nexport const loadExchangeBalances = async (account, exchange, token, dispatch) => {   \n    const ethBalance = await exchange.methods.checkBalance(ETH_ADDRESS, account).call()\n    dispatch(exchangeLoadETHBalance(ethBalance))\n\n    const tokenBalance = await exchange.methods.checkBalance(token._address, account).call()\n    dispatch(exchangeLoadTokenBalance(tokenBalance))\n}\n\nexport const depositETH = (web3, exchange, account, walletBalance, exchangeBalance, depositAmount, dispatch) => {\n    const depositBalances = getDepositBalances(web3, exchangeBalance, walletBalance, depositAmount)\n    \n    exchange.methods.depositETH().send({from: account, value: web3.utils.toWei(depositAmount, 'ether')})\n    .on('transactionHash', (hash) => {\n        dispatch(loadingBalances(true))\n        dispatch(exchangeLoadETHBalance(depositBalances.newExchangeBalance))\n        dispatch(walletLoadEthBalance(depositBalances.newWalletBalance))\n    })\n    .on('error', (err) => {\n        console.error(err)\n        window.alert(err.message)\n    });\n}\n\nexport const depositToken = (web3, exchange, token, account, walletBalance, exchangeBalance, depositAmount, dispatch) => {\n    const depositBalances = getDepositBalances(web3, exchangeBalance, walletBalance, depositAmount)\n    depositAmount = web3.utils.toWei(depositAmount, 'ether')\n\n    token.methods.approve(exchange._address, depositAmount).send({from: account})\n    .on('transactionHash', (hash) => {\n        exchange.methods.depositTokens(token._address, depositAmount).send({from: account})\n        .on('transactionHash', (hash) => {\n            dispatch(loadingBalances(true))\n            dispatch(exchangeLoadTokenBalance(depositBalances.newExchangeBalance))\n            dispatch(walletLoadTokenBalance(depositBalances.newWalletBalance))\n        })\n        .on('error', (err) => {\n            console.error(err)\n            window.alert(err.message)\n        });\n    })\n}\n\nexport const withdrawETH = (web3, exchange, account, walletBalance, exchangeBalance, withdrawAmount, dispatch) => {\n    const withdrawBalances = getWithdrawBalances(web3, exchangeBalance, walletBalance, withdrawAmount)\n    \n    exchange.methods.withdrawETH(web3.utils.toWei(withdrawAmount, 'ether')).send({from: account})\n    .on('transactionHash', (hash) => {\n        dispatch(loadingBalances(true))\n        dispatch(exchangeLoadETHBalance(withdrawBalances.newExchangeBalance))\n        dispatch(walletLoadEthBalance(withdrawBalances.newWalletBalance))\n    })\n    .on('error', (err) => {\n        console.error(err)\n        window.alert(err.message)\n    });\n}\n\nexport const withdrawToken = (web3, exchange, token, account, walletBalance, exchangeBalance, withdrawAmount, dispatch) => {\n    const withdrawBalances = getWithdrawBalances(web3, exchangeBalance, walletBalance, withdrawAmount)\n    withdrawAmount = web3.utils.toWei(withdrawAmount, 'ether')\n\n    exchange.methods.withdrawTokens(token._address, withdrawAmount).send({from: account})\n    .on('transactionHash', (hash) => {\n        dispatch(loadingBalances(true))\n        dispatch(exchangeLoadTokenBalance(withdrawBalances.newExchangeBalance))\n        dispatch(walletLoadTokenBalance(withdrawBalances.newWalletBalance))\n    })\n    .on('error', (err) => {\n        console.error(err)\n        window.alert(err.message)\n    });\n}","import React from 'react'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport Spinner from './Spinner'\nimport { connect } from 'react-redux'\nimport { allOrdersLoadedSelector, openOrdersSelector, fillingOrderSelector } from '../store/selectors/ordersSelector'\nimport { accountSelector, exchangeSelector } from '../store/selectors'\nimport { fillOrder } from '../store/interactions/exchangeInteractions'\n\nconst showOrders = (props, type) => {\n  const {openOrders, exchange, account, dispatch} = props\n\n  return(\n    <tbody>\n      <tr>\n        <th>ELB</th>\n        <th>ELB/ETH</th>\n        <th>ETH</th>\n      </tr>\n      {openOrders[type].map((order) => {\n        return(\n          <tr className={`order-${order.id} order-book-order`} key={order.id} onClick={() => {fillOrder(exchange, order.id, account, dispatch)}}>\n            <td>{order.tokenAmount}</td>\n            <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\n            <td>{order.ethAmount}</td>\n          </tr>\n        )\n      })}\n    </tbody>\n  )\n}\n\nclass Content extends React.Component {\n  render(){\n    return (\n        <div className=\"vertical\">\n          <div className=\"card bg-dark text-white\">\n            <div className=\"card-header\">\n                Order Book\n            </div>\n            <div className=\"card-body\">\n              <Tabs defaultActiveKey=\"buyOrders\" transition={false} id=\"orderBook\" className=\"bg-dark text-white\">\n                <Tab eventKey=\"buyOrders\" title=\"Buy\" className=\"bg-dark\">\n                  <table className=\"table table-dark table-sm small\">                        \n                      { this.props.showOrders ? showOrders(this.props, 'Buy') : <Spinner type=\"table\"/> }\n                  </table>\n                </Tab>\n                <Tab eventKey=\"sellOrders\" title=\"Sell\" className=\"bg-dark\">\n                  <table className=\"table table-dark table-sm small\">                        \n                      { this.props.showOrders ? showOrders(this.props, 'Sell') : <Spinner type=\"table\"/> }\n                  </table>\n                </Tab>\n              </Tabs>\n            \n            </div>\n          </div>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  const ordersLoaded = allOrdersLoadedSelector(state)\n  const fillingOrder = fillingOrderSelector(state)\n  const showOrders = ordersLoaded && !fillingOrder\n\n  return {\n      openOrders: openOrdersSelector(state),\n      exchange: exchangeSelector(state),\n      account: accountSelector(state),\n      showOrders: showOrders\n  }\n}\n\nexport default connect(mapStateToProps)(Content);\n","import React from 'react'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport Spinner from './Spinner'\nimport { connect } from 'react-redux'\nimport {cancelOrder} from '../store/interactions/exchangeInteractions'\nimport {accountSelector, exchangeSelector} from '../store/selectors'\n\nimport { \n    allOrdersLoadedSelector,\n    filledOrdersLoadedSelector,\n    myTradesSelector,\n    myOpenOrdersSelector,\n    cancelingOrderSelector\n} from '../store/selectors/ordersSelector'\n\nconst showMyTrades = (trades) => {\n    return (\n        <tbody>\n            {trades.map((trade) => {\n                return(\n                    <tr className={`order-${trade.id}`} key={trade.id}>\n                        <td className={`text-${trade.tradeTypeClass}`}>{trade.formattedTimestamp}</td>\n                        <td className={`text-${trade.tradeTypeClass}`}>{`${trade.tradeSign}${trade.tokenAmount}`}</td>\n                        <td className={`text-${trade.tradeTypeClass}`}>{trade.tokenPrice}</td>\n                    </tr>\n                )\n            })}\n        </tbody>\n    )\n}\n\nconst showMyOrders = (props, type) => {\n  const {myOpenOrders, exchange, account, dispatch} = props\n\n  return(\n        <tbody>\n          {myOpenOrders[type].map((order) => {\n            return(\n              <tr className={`order-${order.id}`} key={order.id}>\n                <td className={`text-${order.orderTypeClass}`}>{order.tokenAmount}</td>\n                <td className={`text-${order.orderTypeClass}`}>{order.tokenPrice}</td>\n                <td className={`text-${order.orderTypeClass}`}>{order.ethAmount}</td>\n                <td className=\"text-muted cancel-order\" \n                  onClick={() => {cancelOrder(exchange, order.id, account, dispatch)}}\n                >\n                  X\n                </td>\n              </tr>\n            )\n          })}\n        </tbody>\n      )\n}\n\nclass MyTransactions extends React.Component {\n  render(){\n    return (\n        <div className=\"card bg-dark text-white\">\n            <div className=\"card-header\">\n                My Transactions\n            </div>\n            <div className=\"card-body\">\n            <Tabs defaultActiveKey=\"trades\" transition={false} id=\"myTransactions\" className=\"bg-dark text-white\">\n                <Tab eventKey=\"trades\" title=\"Trades\" className=\"bg-dark\">\n                    <table className=\"table table-dark table-sm small\">   \n                        <thead>\n                            <tr>\n                                <th>Time</th>\n                                <th>ELB</th>\n                                <th>ELB/ETH</th>\n                            </tr>\n                        </thead>\n                        { this.props.filledOrdersLoaded ? showMyTrades(this.props.myTrades) : <Spinner type=\"table\"/> }\n                    </table>\n                </Tab>\n                <Tab eventKey=\"buyOrders\" title=\"Buy\" className=\"bg-dark\">\n                    <table className=\"table table-dark table-sm small\">   \n                        <thead>\n                            <tr>\n                                <th>ELB</th>\n                                <th>ELB/ETH</th>\n                                <th>ETH</th>\n                                <th> Cancel</th>\n                            </tr>\n                        </thead>\n                        { this.props.showOrders ? showMyOrders(this.props, 'Buy') : <Spinner type=\"table\"/> }\n                    </table>\n                </Tab>\n                <Tab eventKey=\"sellOrders\" title=\"Sell\" className=\"bg-dark\">\n                    <table className=\"table table-dark table-sm small\">   \n                        <thead>\n                            <tr>\n                                <th>ELB</th>\n                                <th>ELB/ETH</th>\n                                <th>ETH</th>\n                                <th> Cancel</th>\n                            </tr>\n                        </thead>\n                        { this.props.showOrders ? showMyOrders(this.props, 'Sell') : <Spinner type=\"table\"/> }\n                    </table>\n                </Tab>        \n            </Tabs>\n            </div>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n\n    const ordersLoaded= allOrdersLoadedSelector(state)\n    const cancelingOrder = cancelingOrderSelector(state)\n    const showOrders = ordersLoaded && !cancelingOrder\n\n  return {\n      filledOrdersLoaded: filledOrdersLoadedSelector(state),\n      myTrades: myTradesSelector(state),\n      myOpenOrders: myOpenOrdersSelector(state),\n      exchange: exchangeSelector(state),\n      account: accountSelector(state),\n      showOrders: showOrders,\n  }\n}\n\nexport default connect(mapStateToProps)(MyTransactions);\n","export const chartOptions = {\n    chart: {\n      animations: { enabled: false },\n      toolbar: { show: false },\n      width: '100px'\n    },\n    tooltip: {\n      enabled: true,\n      theme: false,\n      style: {\n        fontSize: '12px',\n        fontFamily: undefined\n      },\n      x: {\n          show: false,\n          format: 'dd MMM',\n          formatter: undefined,\n      },\n      y: {\n        show: true,\n        title: 'price'\n      },\n      marker: {\n        show: false,\n      },\n      items: {\n         display: 'flex',\n      },\n      fixed: {\n          enabled: false,\n          position: 'topRight',\n          offsetX: 0,\n          offsetY: 0,\n      },\n    },\n    xaxis: {\n      type: 'datetime',\n      labels: {\n        show: true,\n        style: {\n            colors: '#fff',\n            fontSize: '8px',\n            cssClass: 'apexcharts-xaxis-label',\n        },\n      },\n    },\n    yaxis: {\n      labels: {\n        show: true,\n        minWidth: 0,\n        maxWidth: 160,\n        style: {\n          color: '#fff',\n          fontSize: '8px',\n          cssClass: 'apexcharts-yaxis-label',\n        },\n        offsetX: 0,\n        offsetY: 0,\n        rotate: 0,\n      }\n    }\n  }\n  \n  export const dummyData = [\n    {\n      data: [\n        {\n          x: new Date(1538778600000),\n          y: [6629.81, 6650.5, 6623.04, 6633.33]\n        },\n        {\n          x: new Date(1538780400000),\n          y: [6632.01, 6643.59, 6620, 6630.11]\n        },\n        {\n          x: new Date(1538782200000),\n          y: [6630.71, 6648.95, 6623.34, 6635.65]\n        },\n        {\n          x: new Date(1538784000000),\n          y: [6635.65, 6651, 6629.67, 6638.24]\n        },\n        {\n          x: new Date(1538785800000),\n          y: [6638.24, 6640, 6620, 6624.47]\n        },\n        {\n          x: new Date(1538787600000),\n          y: [6624.53, 6636.03, 6621.68, 6624.31]\n        },\n        {\n          x: new Date(1538789400000),\n          y: [6624.61, 6632.2, 6617, 6626.02]\n        },\n        {\n          x: new Date(1538791200000),\n          y: [6627, 6627.62, 6584.22, 6603.02]\n        },\n        {\n          x: new Date(1538793000000),\n          y: [6605, 6608.03, 6598.95, 6604.01]\n        },\n        {\n          x: new Date(1538794800000),\n          y: [6604.5, 6614.4, 6602.26, 6608.02]\n        },\n        {\n          x: new Date(1538796600000),\n          y: [6608.02, 6610.68, 6601.99, 6608.91]\n        },\n        {\n          x: new Date(1538798400000),\n          y: [6608.91, 6618.99, 6608.01, 6612]\n        },\n        {\n          x: new Date(1538800200000),\n          y: [6612, 6615.13, 6605.09, 6612]\n        },\n        {\n          x: new Date(1538802000000),\n          y: [6612, 6624.12, 6608.43, 6622.95]\n        },\n        {\n          x: new Date(1538803800000),\n          y: [6623.91, 6623.91, 6615, 6615.67]\n        },\n        {\n          x: new Date(1538805600000),\n          y: [6618.69, 6618.74, 6610, 6610.4]\n        },\n        {\n          x: new Date(1538807400000),\n          y: [6611, 6622.78, 6610.4, 6614.9]\n        },\n        {\n          x: new Date(1538809200000),\n          y: [6614.9, 6626.2, 6613.33, 6623.45]\n        },\n        {\n          x: new Date(1538811000000),\n          y: [6623.48, 6627, 6618.38, 6620.35]\n        },\n        {\n          x: new Date(1538812800000),\n          y: [6619.43, 6620.35, 6610.05, 6615.53]\n        },\n        {\n          x: new Date(1538814600000),\n          y: [6615.53, 6617.93, 6610, 6615.19]\n        },\n        {\n          x: new Date(1538816400000),\n          y: [6615.19, 6621.6, 6608.2, 6620]\n        },\n        {\n          x: new Date(1538818200000),\n          y: [6619.54, 6625.17, 6614.15, 6620]\n        },\n        {\n          x: new Date(1538820000000),\n          y: [6620.33, 6634.15, 6617.24, 6624.61]\n        },\n        {\n          x: new Date(1538821800000),\n          y: [6625.95, 6626, 6611.66, 6617.58]\n        },\n        {\n          x: new Date(1538823600000),\n          y: [6619, 6625.97, 6595.27, 6598.86]\n        },\n        {\n          x: new Date(1538825400000),\n          y: [6598.86, 6598.88, 6570, 6587.16]\n        },\n        {\n          x: new Date(1538827200000),\n          y: [6588.86, 6600, 6580, 6593.4]\n        },\n        {\n          x: new Date(1538829000000),\n          y: [6593.99, 6598.89, 6585, 6587.81]\n        },\n        {\n          x: new Date(1538830800000),\n          y: [6587.81, 6592.73, 6567.14, 6578]\n        },\n        {\n          x: new Date(1538832600000),\n          y: [6578.35, 6581.72, 6567.39, 6579]\n        },\n        {\n          x: new Date(1538834400000),\n          y: [6579.38, 6580.92, 6566.77, 6575.96]\n        },\n        {\n          x: new Date(1538836200000),\n          y: [6575.96, 6589, 6571.77, 6588.92]\n        },\n        {\n          x: new Date(1538838000000),\n          y: [6588.92, 6594, 6577.55, 6589.22]\n        },\n        {\n          x: new Date(1538839800000),\n          y: [6589.3, 6598.89, 6589.1, 6596.08]\n        },\n        {\n          x: new Date(1538841600000),\n          y: [6597.5, 6600, 6588.39, 6596.25]\n        },\n        {\n          x: new Date(1538843400000),\n          y: [6598.03, 6600, 6588.73, 6595.97]\n        },\n        {\n          x: new Date(1538845200000),\n          y: [6595.97, 6602.01, 6588.17, 6602]\n        },\n        {\n          x: new Date(1538847000000),\n          y: [6602, 6607, 6596.51, 6599.95]\n        },\n        {\n          x: new Date(1538848800000),\n          y: [6600.63, 6601.21, 6590.39, 6591.02]\n        },\n        {\n          x: new Date(1538850600000),\n          y: [6591.02, 6603.08, 6591, 6591]\n        },\n        {\n          x: new Date(1538852400000),\n          y: [6591, 6601.32, 6585, 6592]\n        },\n        {\n          x: new Date(1538854200000),\n          y: [6593.13, 6596.01, 6590, 6593.34]\n        },\n        {\n          x: new Date(1538856000000),\n          y: [6593.34, 6604.76, 6582.63, 6593.86]\n        },\n        {\n          x: new Date(1538857800000),\n          y: [6593.86, 6604.28, 6586.57, 6600.01]\n        },\n        {\n          x: new Date(1538859600000),\n          y: [6601.81, 6603.21, 6592.78, 6596.25]\n        },\n        {\n          x: new Date(1538861400000),\n          y: [6596.25, 6604.2, 6590, 6602.99]\n        },\n        {\n          x: new Date(1538863200000),\n          y: [6602.99, 6606, 6584.99, 6587.81]\n        },\n        {\n          x: new Date(1538865000000),\n          y: [6587.81, 6595, 6583.27, 6591.96]\n        },\n        {\n          x: new Date(1538866800000),\n          y: [6591.97, 6596.07, 6585, 6588.39]\n        },\n        {\n          x: new Date(1538868600000),\n          y: [6587.6, 6598.21, 6587.6, 6594.27]\n        },\n        {\n          x: new Date(1538870400000),\n          y: [6596.44, 6601, 6590, 6596.55]\n        },\n        {\n          x: new Date(1538872200000),\n          y: [6598.91, 6605, 6596.61, 6600.02]\n        },\n        {\n          x: new Date(1538874000000),\n          y: [6600.55, 6605, 6589.14, 6593.01]\n        },\n        {\n          x: new Date(1538875800000),\n          y: [6593.15, 6605, 6592, 6603.06]\n        },\n        {\n          x: new Date(1538877600000),\n          y: [6603.07, 6604.5, 6599.09, 6603.89]\n        },\n        {\n          x: new Date(1538879400000),\n          y: [6604.44, 6604.44, 6600, 6603.5]\n        },\n        {\n          x: new Date(1538881200000),\n          y: [6603.5, 6603.99, 6597.5, 6603.86]\n        },\n        {\n          x: new Date(1538883000000),\n          y: [6603.85, 6605, 6600, 6604.07]\n        },\n        {\n          x: new Date(1538884800000),\n          y: [6604.98, 6606, 6604.07, 6606]\n        },\n      ]\n    }\n  ]\n  ","import { createSelector } from 'reselect'\nimport { groupBy, maxBy, minBy} from 'lodash'\nimport moment from 'moment'\nimport {\n    filledOrdersLoaded, \n    filledOrders,\n    decorateFilledOrders\n} from './ordersSelector'\n\nexport const priceChartDataLoadedSelector = createSelector(filledOrdersLoaded, loaded => loaded)\nexport const priceChartDataSelector = createSelector(\n    filledOrders,\n    (orders) => {\n        orders = orders.sort((a,b) => ( a.timeStamp - b.timeStamp ))\n        orders = decorateFilledOrders(orders)\n\n        const graphData = getGraphData(orders)\n        const lastPrice = orders.length > 0 ? orders[orders.length - 1].tokenPrice : 0\n        const lastClosePrice = graphData.length <= 1 ? lastPrice : graphData[graphData.length - 2].y[3]\n        const direction = (lastPrice >= lastClosePrice) ? 'up' : 'down'\n        \n        const series = [{data: graphData}]\n        const priceChartData = { series, lastPrice, direction }\n        return priceChartData\n    }\n)\n\nconst getGraphData = (orders) => {\n    orders = groupBy(orders, (o) => moment.unix(o.timeStamp).startOf('hour').format())\n    const hours = Object.keys(orders)\n\n    const graphData = hours.map(hour => {\n        const group = orders[hour]\n        const open = group[0]\n        const high = maxBy(group, 'tokenPrice')\n        const low = minBy(group, 'tokenPrice')\n        const close = group[group.length - 1]\n\n        return({\n            x: hour,\n            y:[open.tokenPrice, high.tokenPrice, low.tokenPrice, close.tokenPrice]\n        })\n    })\n\n    return graphData    \n}","import React from 'react'\nimport Chart from 'react-apexcharts'\nimport { connect } from 'react-redux'\nimport Spinner from './Spinner'\nimport {chartOptions} from '../utils/priceChartUtil'\n\nimport { \n    priceChartDataLoadedSelector,\n    priceChartDataSelector\n} from '../store/selectors/priceChartSelector'\n\nconst getDirection = (direction) => {\n    let output\n    if(direction === 'up') {\n      output = <span className=\"text-success\">&#9650;</span> // Green up tiangle\n    } else {\n      output = <span className=\"text-danger\">&#9660;</span> // Red down triangle\n    }\n    return(output)\n  }\n\nconst showPriceData = (chartData) => {\n    return(\n        <div className=\"price-chart\">\n            <div className=\"price\">\n                <h4>ELB/ETH &nbsp; {getDirection(chartData.direction)} &nbsp; {chartData.lastPrice}</h4>\n            </div>\n            <Chart options={chartOptions} series={chartData.series} type='candlestick' width='100%' height='100%' />\n        </div>\n    )\n}\n\nclass PriceChart extends React.Component {\n  render(){\n    return (\n        <div className=\"card bg-dark text-white\">\n            <div className=\"card-header\">\n                Price Chart\n            </div>\n            <div className=\"card-body\">\n                {this.props.priceChartDataLoaded ? showPriceData(this.props.priceChartData) : <Spinner />}\n            </div>\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      priceChartDataLoaded: priceChartDataLoadedSelector(state),\n      priceChartData: priceChartDataSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(PriceChart);\n","import { get } from 'lodash'\nimport { createSelector } from 'reselect'\nimport { formatBalance } from '../../utils/ethUtil'\n\nconst walletEthBalance = state => get(state, 'wallet.ethBalance', 0)\nexport const walletEthBalanceSelector = createSelector(\n    walletEthBalance,\n    (balance) => {\n        balance = formatBalance(balance)\n        return balance\n    }\n)\n\nconst walletTokenBalance = state => get(state, 'wallet.tokenBalance', 0)\nexport const walletTokenBalanceSelector = createSelector(\n    walletTokenBalance,\n    (balance) => {\n        balance = formatBalance(balance)\n        return balance\n    }\n)\n","import React from 'react'\nimport Spinner from './Spinner'\nimport { Tabs, Tab } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { loadingBalances } from '../store/actions/exchangeActions'\nimport { loadWalletBalances } from '../store/interactions/walletInteractions'\nimport { \n    loadExchangeBalances,\n    subscribeToEvents,\n    depositETH,\n    depositToken,\n    withdrawETH,\n    withdrawToken\n} from '../store/interactions/exchangeInteractions'\nimport { \n    web3Selector, \n    accountSelector, \n    tokenSelector,\n    exchangeSelector,\n    exchangeEthBalanceSelector,\n    exchangeTokenBalanceSelector,\n    loadingBalancesSelector\n} from '../store/selectors'\n\nimport { \n    walletEthBalanceSelector,\n    walletTokenBalanceSelector\n} from '../store/selectors/walletSelectors'\n\nconst deposit = (ccy, amount, props) => {\n    const {\n        web3, \n        exchange, \n        token, \n        account, \n        walletEthBalance, \n        exchangeEthBalance, \n        walletTokenBalance,\n        exchangeTokenBalance,\n        dispatch\n    } = props\n\n    if(ccy === 'ETH') {\n        depositETH(web3, exchange, account, walletEthBalance, exchangeEthBalance, amount, dispatch)\n    } else {\n        depositToken(web3, exchange, token, account, walletTokenBalance, exchangeTokenBalance, amount, dispatch )\n    }\n}\n\nconst withdraw = (ccy, amount, props) => {\n    const {\n        web3, \n        exchange, \n        token, \n        account, \n        walletEthBalance, \n        exchangeEthBalance, \n        walletTokenBalance,\n        exchangeTokenBalance,\n        dispatch\n    } = props\n\n    if(ccy === 'ETH') {\n        withdrawETH(web3, exchange, account, walletEthBalance, exchangeEthBalance, amount, dispatch)\n    } else {\n        withdrawToken(web3, exchange, token, account, walletTokenBalance, exchangeTokenBalance, amount, dispatch )\n    }\n}\n\nconst submitEvent = (type, props) => {\n    const amount = document.getElementById(`balanceAmount${type}`).value\n    const ccy = document.getElementById(`balanceCcy${type}`).value\n\n    if(isNaN(amount)) {\n        window.alert(`Amount ${amount} is not valid`)\n        return\n    }\n\n    if(type==='Deposit') {\n        deposit(ccy, amount, props)\n    } else {\n        withdraw(ccy, amount, props)\n    }\n}\n\nconst showBalances = (type, props) => {\n    const {walletEthBalance, walletTokenBalance, exchangeEthBalance, exchangeTokenBalance} = props\n\n    return (\n        <div>\n            <table className=\"table table-dark table-sm small\">\n                <tbody>\n                    <tr key={`${type}-1`}>\n                        <th>Token</th>\n                        <th>Wallet</th>\n                        <th>Exchange</th>\n                    </tr>\n                    <tr key={`${type}-2`}>\n                        <td>ETH</td>\n                        <td>{walletEthBalance}</td>\n                        <td>{exchangeEthBalance}</td>\n                    </tr>\n                    <tr key={`${type}-3`}>\n                        <td>ELB</td>\n                        <td>{walletTokenBalance}</td>\n                        <td>{exchangeTokenBalance}</td>\n                    </tr>\n                </tbody>\n            </table>\n            <form className=\"row\" onSubmit={(event) => {\n                event.preventDefault()\n                submitEvent(type, props)\n            }}>\n                <div className=\"col-12 col-sm pr-sm-2\">\n                    <input id={`balanceAmount${type}`} type=\"text\" placeholder=\"Amount\" className=\"form-control form-control-sm bg-dark text-white\" required />\n                </div>\n                <div className=\"col-12 col-sm pr-sm-2\" style={{paddingLeft: '0px'}}>\n                    <select id={`balanceCcy${type}`} className=\"form-control form-control-sm bg-dark text-white\" required>    \n                        <option value=\"ETH\">ETH</option>\n                        <option value=\"ELB\">ELB</option>\n                    </select>\n                </div>\n                <div className=\"col-12 col-sm-auto pl-sm-0\">\n                    <button type=\"submit\" className=\"btn btn-primary btn-block btn-sm\">{type}</button>\n                </div>\n            </form>\n        </div>\n    )\n}\n\nclass Balance extends React.Component {\n    componentDidMount() {\n        this.loadBalances()\n    }\n\n    async loadBalances() {\n        const {web3, account, dispatch, token, exchange} = this.props\n        this.subscribeToEvents(exchange, web3, account, token, dispatch)\n        \n        dispatch(loadingBalances(true))\n        await loadWalletBalances(web3, account, token, dispatch)\n        await loadExchangeBalances(account, exchange, token, dispatch)\n        dispatch(loadingBalances(false))\n\n        \n    }\n\n    subscribeToEvents(exchange, web3, account, token, dispatch) {\n        subscribeToEvents(exchange, web3, account, token, dispatch)\n    }\n \n    render(){\n    return (\n        <div className=\"card bg-dark text-white\">\n            <div className=\"card-header\">\n                Balance\n            </div>\n            <div className=\"card-body\">\n                <Tabs defaultActiveKey=\"deposits\" transition={false} id=\"balance\" className=\"bg-dark text-white\">\n                    <Tab eventKey=\"deposits\" title=\"Deposits\" className=\"bg-dark\">\n                        {!this.props.loadingBalances ? showBalances('Deposit', this.props) : <Spinner />}\n                    </Tab>\n                    <Tab eventKey=\"withdraw\" title=\"Withdraw\" className=\"bg-dark\">\n                        {!this.props.loadingBalances ? showBalances('Withdraw', this.props) : <Spinner />}\n                    </Tab>\n                </Tabs>\n            </div>\n        </div>\n    );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const loadingBalances = loadingBalancesSelector(state)\n   \n    return {\n        web3: web3Selector(state),\n        account: accountSelector(state),\n        token: tokenSelector(state),\n        exchange: exchangeSelector(state),\n        loadingBalances: loadingBalances,\n        walletEthBalance: walletEthBalanceSelector(state),\n        walletTokenBalance: walletTokenBalanceSelector(state),\n        exchangeEthBalance: exchangeEthBalanceSelector(state),\n        exchangeTokenBalance: exchangeTokenBalanceSelector(state)\n    }\n}\n\nexport default connect(mapStateToProps)(Balance);\n","import React from 'react'\nimport Spinner from './Spinner'\nimport {Tabs, Tab, Form, Button} from 'react-bootstrap'\nimport {connect} from 'react-redux'\nimport {creatingOrderSelector} from '../store/selectors/ordersSelector'\nimport {createOrder} from '../store/interactions/exchangeInteractions'\nimport {ETH_ADDRESS} from '../utils/ethUtil'\nimport { \n    accountSelector, \n    tokenSelector,\n    exchangeSelector,\n    web3Selector\n} from '../store/selectors'\n\nclass NewOrder extends React.Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            totalAmount: 0\n        }\n\n        this.calculateTotal = this.calculateTotal.bind(this)\n        this.generateOrder = this.generateOrder.bind(this)\n    }\n\n    generateOrder (orderType) {\n        const {exchange, account, token, dispatch, web3} = this.props\n        const elbAmount = parseFloat(document.getElementById(`amount${orderType}`).value)\n        const ethAmount = this.state.totalAmount\n\n        if(!isNaN(elbAmount) && !isNaN(ethAmount)) {\n            if(orderType === 'Buy') {\n                createOrder(web3, exchange, account, token._address, elbAmount.toString(), ETH_ADDRESS, ethAmount.toString(), dispatch)\n            } else {\n                createOrder(web3, exchange, account, ETH_ADDRESS, ethAmount.toString(), token._address, elbAmount.toString(), dispatch)\n            }\n        }\n    }\n\n    calculateTotal (orderType) {\n        const amount = parseFloat(document.getElementById(`amount${orderType}`).value)\n        const price = parseFloat(document.getElementById(`price${orderType}`).value)\n\n        if(isNaN(amount) || isNaN(price)) {\n            this.setState((state) => ({...state, totalAmount: 0}))\n        } else {\n            this.setState((state) => ({...state, totalAmount: amount * price}))\n        }\n    }\n\n    getOrderForm (orderType) {\n        return(\n            <Form onSubmit={(event) =>{\n                event.preventDefault()\n                this.generateOrder(orderType)\n            }}>\n                <Form.Group>\n                    <Form.Label>{`${orderType} (ELB)`}</Form.Label>\n                    <Form.Control id={`amount${orderType}`} type=\"text\" placeholder=\"Amount\" className=\"form-control form-control-sm bg-dark text-white\" onChange={() => this.calculateTotal(orderType)} />\n                </Form.Group>\n                <Form.Group>\n                    <Form.Label>{`${orderType} price`}</Form.Label>\n                    <Form.Control id={`price${orderType}`} type=\"text\" placeholder=\"Price\" className=\"form-control form-control-sm bg-dark text-white\" onChange={() => this.calculateTotal(orderType)} />\n                </Form.Group>\n                <Form.Group controlId=\"formTotal\" style={{width: \"100%\"}}>\n                    <Form.Label>Total: {this.state.totalAmount} ETH</Form.Label>\n                </Form.Group>\n                <Button variant=\"primary\" type=\"submit\" style={{width: \"100%\"}}>\n                    {orderType}\n                </Button>\n            </Form>\n        )\n    }\n\n    render() {\n        return (\n            <div className=\"card bg-dark text-white\">\n                <div className=\"card-header\">\n                  New Order\n                </div>\n                <div className=\"card-body\">\n                    <Tabs defaultActiveKey=\"buyNew\" transition={false} id=\"newOrders\" className=\"bg-dark text-white\">\n                        <Tab eventKey=\"buyNew\" title=\"Buy\" className=\"bg-dark\">\n                            {!this.props.creatingOrder ? this.getOrderForm('Buy') : <Spinner />}\n                        </Tab>\n                        <Tab eventKey=\"sellNew\" title=\"Sell\" className=\"bg-dark\">\n                            {!this.props.creatingOrder ? this.getOrderForm('Sell') : <Spinner />}\n                        </Tab>\n                    </Tabs>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        creatingOrder: creatingOrderSelector(state),\n        account: accountSelector(state),\n        token: tokenSelector(state),\n        exchange: exchangeSelector(state),\n        web3: web3Selector(state),\n    }\n}\n\nexport default connect(mapStateToProps)(NewOrder);","import React from 'react'\nimport Trades from './Trades'\nimport OrderBook from './OrderBook'\nimport MyTransactions from './MyTransactions'\nimport PriceChart from './PriceChart'\nimport Balance from './Balance'\nimport NewOrder from './NewOrder'\nimport { connect } from 'react-redux'\nimport { exchangeSelector} from '../store/selectors/index'\nimport { loadOrders } from '../store/interactions/exchangeInteractions'\n\nclass Content extends React.Component {\n  componentDidMount() {\n    this.loadOrders(this.props.dispatch)\n  }\n\n  async loadOrders(dispatch)  {\n    await loadOrders(this.props.exchange, dispatch)\n  }\n\n  render(){\n    return (\n        <div className=\"content\">\n            <div className=\"vertical-split\">\n              <Balance />\n              <NewOrder />\n            </div>\n            <OrderBook />\n            <div className=\"vertical-split\">\n              <PriceChart />\n              <MyTransactions />\n            </div>\n            <Trades />\n          </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    exchange: exchangeSelector(state),\n    state: state\n  }\n}\n\nexport default connect(mapStateToProps)(Content);\n","import Web3 from 'web3'\nimport { web3Loaded, web3Account} from '../actions/web3Actions'\n\nexport const loadWeb3 = (dispatch) => {\n    const web3 = new Web3(Web3.givenProvider || 'http://localhost:8545')\n    dispatch(web3Loaded(web3))\n    return web3\n}\n\nexport const loadAccount = async (web3, dispatch) => {\n    const accounts = await web3.eth.getAccounts()\n\n    if (accounts.length > 0) {\n        dispatch(web3Account(accounts[0]))\n        return accounts[0]\n    } else {\n        return null\n    }\n}\n","export const web3Loaded = (connection) => {\n    return {\n        type: 'WEB3_LOADED',\n        connection\n    }\n}\n\nexport const web3Account = (account) => {\n    return {\n        type: 'WEB3_ACCOUNT_LOADED',\n        account\n    }\n}\n","export const tokenLoaded = (token) => {\n    return {\n        type: 'TOKEN_LOADED',\n        token\n    }\n}\n","import Token from  '../../abis/Token.json'\nimport { tokenLoaded } from '../actions/tokenActions'\n\nexport const loadToken = async (web3, dispatch) => {\n    const networkId = await web3.eth.net.getId()\n    const networks = Token.networks\n    \n    if(networks[networkId] === undefined) {\n        return null\n    } else {\n        const address = networks[networkId].address\n        const abi = Token.abi\n        const token = new web3.eth.Contract(abi, address)\n        dispatch(tokenLoaded(token))\n        return token\n    }\n}","import React from 'react'\nimport { connect } from 'react-redux'\nimport './style/App.css';\n\nimport NavBar from './NavBar'\nimport Content from './Content'\n\nimport { loadWeb3, loadAccount } from '../store/interactions/web3Interactions'\nimport { loadToken } from '../store/interactions/tokenInteractions'\nimport { loadExchange } from '../store/interactions/exchangeInteractions'\nimport { accountSelector, contractsLoadedSelector } from '../store/selectors/index'\n\nclass App extends React.Component {\n  componentDidMount() {\n    this.loadBlockChainData(this.props.dispatch)\n  }\n  \n  async loadBlockChainData(dispatch) {\n    const web3 = loadWeb3(dispatch)\n    const account = await loadAccount(web3, dispatch)\n\n    const token = await loadToken(web3, dispatch)\n    const exchange = await loadExchange(web3, dispatch)\n\n    if(!token || ! exchange) {\n      window.alert('Contracts not found in current network. Please select another network via Metamask')\n      return\n    }\n\n    if(!account) {\n      window.alert('Account not connected. Please connect account via Metamask')\n      return\n    } \n  }\n\n  render(){\n    return (\n        <div>\n          <NavBar />\n          { (this.props.contractsLoaded && this.props.account) ? <Content /> : <div className=\"content\"></div>}\n        </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    contractsLoaded: contractsLoadedSelector(state),\n    account: accountSelector(state)\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { combineReducers} from 'redux'\n\nconst web3 = (state = {}, action) => {\n    switch (action.type) {\n        case 'WEB3_LOADED':\n            return { ...state, connection: action.connection}\n        case 'WEB3_ACCOUNT_LOADED':\n            return { ...state, account: action.account}\n        default:\n            return state\n    }\n}\n\nconst token = (state = {}, action) => {\n    switch (action.type) {\n        case 'TOKEN_LOADED':\n            return { ...state, loaded: true, contract: action.token}\n        default:\n            return state\n    }\n}\n\nconst wallet = (state = {}, action) => {\n    switch (action.type) {\n        case 'LOAD_WALLET_ETH_BALANCE':\n            return {...state, ethBalance: action.ethBalance}\n        case 'LOAD_WALLET_TOKEN_BALANCE':\n                return {...state, tokenBalance: action.tokenBalance}\n        default:\n            return state\n    }\n}\n\nconst exchange = (state = {}, action) => {\n    switch (action.type) {\n        case 'EXCHANGE_LOADED':\n            return { ...state, loaded: true, contract: action.exchange}\n        case 'CANCELED_ORDERS_LOADED':\n            return { ...state, canceledOrders: {loaded: true, data: action.canceledOrders}, cancelingOrder: false }\n        case 'FILLED_ORDERS_LOADED':\n            return { ...state, filledOrders: {loaded: true, data: action.filledOrders}, fillingOrder: false }\n        case 'ALL_ORDERS_LOADED':\n            return { ...state, allOrders: {loaded: true, data: action.allOrders}, creatingOrder: false }\n        case 'CANCELING_ORDER':\n            return {...state, cancelingOrder: true}\n        case 'FILLING_ORDER':\n            return {...state, fillingOrder: true}\n        case 'CREATING_ORDER':\n            return {...state, creatingOrder: true}\n        case 'LOAD_EXCHANGE_ETH_BALANCE':\n            return {...state, ethBalance: action.ethBalance}\n        case 'LOAD_EXCHANGE_TOKEN_BALANCE':\n                return {...state, tokenBalance: action.tokenBalance}\n        case 'LOADING_BALANCES':\n            return {...state, loadingBalances: action.loadingBalances}\n        case 'ORDER_CREATED':\n            return {\n                ...state, \n                allOrders:{\n                    loaded: true,\n                    data: [\n                        ...state.allOrders.data,\n                        action.order\n                    ]\n                }, \n                creatingOrder: false\n            }\n        case 'ORDER_CANCELED':\n            return {\n                ...state,\n                canceledOrders: {\n                    loaded: true,\n                    data: [\n                        ...state.canceledOrders.data,\n                        action.order\n                    ]\n                },\n                cancelingOrder: false\n            }\n        case 'ORDER_FILLED':\n            return {\n                ...state,\n                filledOrders: {\n                    loaded: true,\n                    data: [\n                        ...state.filledOrders.data,\n                        action.order\n                    ]\n                },\n                fillingOrder: false\n            }        \n        default:\n            return state\n    }\n}\n\nconst rootReducer = combineReducers({\n    web3,\n    token,\n    exchange,\n    wallet\n})\n\nexport default rootReducer","import { createStore, applyMiddleware, compose } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport rootReducer from './reducers'\n\nconst loggerMiddleware = createLogger()\nconst middleware = []\n\n//For Redux Dev Tools\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst configureSore = (preloadedState) => {\n    return createStore(\n        rootReducer,\n        preloadedState,\n        composeEnhancers(applyMiddleware(...middleware, loggerMiddleware))\n    )\n}\n\nexport default configureSore","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App'\nimport reportWebVitals from './reportWebVitals'\nimport configureSore from './store/configureStore'\n\nReactDOM.render(\n    <Provider store={configureSore()}>\n      <App />\n    </Provider>,\n  \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}